{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Smsdrop-Python \u00b6 Documentation: https://tobi-de.github.io/smsdrop-python/ Source Code: https://github.com/Tobi-De/smsdrop-python/ The official python sdk for the smsdrop api. Quickstart \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 import datetime import logging import time import pytz from dotenv import dotenv_values from smsdrop import CampaignCreate , Client , RedisStorage # Enable Debug Logging # This will og the API request and response data to the console: logging . basicConfig ( level = logging . DEBUG , format = \" %(message)s \" ) config = dotenv_values ( \".env\" ) TEST_EMAIL = config . get ( \"TEST_EMAIL\" ) TEST_PASSWORD = config . get ( \"TEST_PASSWORD\" ) MY_TIMEZONE = config . get ( \"MY_TIMEZONE\" ) def main (): # Initialize the client client = Client ( email = TEST_EMAIL , password = TEST_PASSWORD , storage = RedisStorage () ) # Get your account profile informations print ( client . read_me ()) # Get your subscription informations print ( client . read_subscription ()) # Get your first 500 campaigns print ( client . read_campaigns ( skip = 0 , limit = 500 )) # Send a simple sms client . send_message ( message = \"hi\" , sender = \"Max\" , phone = \"<phone>\" ) # Create a new Campaign cp = CampaignCreate ( title = \"Test Campaign\" , message = \"Test campaign content\" , sender = \"TestUser\" , recipient_list = [ \"<phone1>\" , \"<phone2>\" , \"<phone3>\" ], ) cp = client . launch_campaign ( cp ) time . sleep ( 20 ) # wait for 20 seconds for the campaign to proceed cp = client . read_campaign ( cp . id ) # refresh your campaign data print ( cp . status ) # Output Example : COMPLETED # create a scheduled campaign naive_dispatch_date = datetime . datetime . now () + datetime . timedelta ( hours = 1 ) aware_dispatch_date = pytz . timezone ( MY_TIMEZONE ) . localize ( naive_dispatch_date ) cp2 = CampaignCreate ( title = \"Test Campaign 2\" , message = \"Test campaign content 2\" , sender = \"TestUser\" , recipient_list = [ \"<phone1>\" , \"<phone2>\" , \"<phone3>\" ], # The date will automatically be send in isoformat with the timezone data defer_until = aware_dispatch_date , ) cp2 = client . launch_campaign ( cp2 ) # If you check the status one hour from now it should return 'COMPLETED' # create another scheduled campaign using defer_by cp3 = CampaignCreate ( title = \"Test Campaign 3\" , message = \"Test campaign content 3\" , sender = \"TestUser\" , recipient_list = [ \"<phone1>\" , \"<phone2>\" , \"<phone3>\" ], defer_by = 120 , ) cp3 = client . launch_campaign ( cp3 ) time . sleep ( 120 ) # wait for 120 seconds for the campaign to proceed cp3 = client . read_campaign ( cp3 . id ) # refresh your campaign data print ( cp3 . status ) # should output : COMPLETED # If you get a 'SCHEDULED' printed, you can wait 10 more seconds in case the network # is a little slow or the server is busy if __name__ == \"__main__\" : main ()","title":"Home"},{"location":"#smsdrop-python","text":"Documentation: https://tobi-de.github.io/smsdrop-python/ Source Code: https://github.com/Tobi-De/smsdrop-python/ The official python sdk for the smsdrop api.","title":"Smsdrop-Python"},{"location":"#quickstart","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 import datetime import logging import time import pytz from dotenv import dotenv_values from smsdrop import CampaignCreate , Client , RedisStorage # Enable Debug Logging # This will og the API request and response data to the console: logging . basicConfig ( level = logging . DEBUG , format = \" %(message)s \" ) config = dotenv_values ( \".env\" ) TEST_EMAIL = config . get ( \"TEST_EMAIL\" ) TEST_PASSWORD = config . get ( \"TEST_PASSWORD\" ) MY_TIMEZONE = config . get ( \"MY_TIMEZONE\" ) def main (): # Initialize the client client = Client ( email = TEST_EMAIL , password = TEST_PASSWORD , storage = RedisStorage () ) # Get your account profile informations print ( client . read_me ()) # Get your subscription informations print ( client . read_subscription ()) # Get your first 500 campaigns print ( client . read_campaigns ( skip = 0 , limit = 500 )) # Send a simple sms client . send_message ( message = \"hi\" , sender = \"Max\" , phone = \"<phone>\" ) # Create a new Campaign cp = CampaignCreate ( title = \"Test Campaign\" , message = \"Test campaign content\" , sender = \"TestUser\" , recipient_list = [ \"<phone1>\" , \"<phone2>\" , \"<phone3>\" ], ) cp = client . launch_campaign ( cp ) time . sleep ( 20 ) # wait for 20 seconds for the campaign to proceed cp = client . read_campaign ( cp . id ) # refresh your campaign data print ( cp . status ) # Output Example : COMPLETED # create a scheduled campaign naive_dispatch_date = datetime . datetime . now () + datetime . timedelta ( hours = 1 ) aware_dispatch_date = pytz . timezone ( MY_TIMEZONE ) . localize ( naive_dispatch_date ) cp2 = CampaignCreate ( title = \"Test Campaign 2\" , message = \"Test campaign content 2\" , sender = \"TestUser\" , recipient_list = [ \"<phone1>\" , \"<phone2>\" , \"<phone3>\" ], # The date will automatically be send in isoformat with the timezone data defer_until = aware_dispatch_date , ) cp2 = client . launch_campaign ( cp2 ) # If you check the status one hour from now it should return 'COMPLETED' # create another scheduled campaign using defer_by cp3 = CampaignCreate ( title = \"Test Campaign 3\" , message = \"Test campaign content 3\" , sender = \"TestUser\" , recipient_list = [ \"<phone1>\" , \"<phone2>\" , \"<phone3>\" ], defer_by = 120 , ) cp3 = client . launch_campaign ( cp3 ) time . sleep ( 120 ) # wait for 120 seconds for the campaign to proceed cp3 = client . read_campaign ( cp3 . id ) # refresh your campaign data print ( cp3 . status ) # should output : COMPLETED # If you get a 'SCHEDULED' printed, you can wait 10 more seconds in case the network # is a little slow or the server is busy if __name__ == \"__main__\" : main ()","title":"Quickstart"},{"location":"authors/","text":"Credits \u00b6 Development Lead \u00b6 Tobi DEGNON degnonfrancis@gmail.com Contributors \u00b6 None yet. Why not be the first?","title":"Authors"},{"location":"authors/#credits","text":"","title":"Credits"},{"location":"authors/#development-lead","text":"Tobi DEGNON degnonfrancis@gmail.com","title":"Development Lead"},{"location":"authors/#contributors","text":"None yet. Why not be the first?","title":"Contributors"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/Tobi-De/smsdrop-python/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 smsdrop-python could always use more documentation, whether as part of the official smsdrop-python docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/Tobi-De/smsdrop-python/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up smsdrop-python for local development. Fork the smsdrop-python repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:Tobi-De/smsdrop-python.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/Tobi-De/smsdrop-python/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 1 $ pytest tests.test_smsdrop_python To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/Tobi-De/smsdrop-python/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"smsdrop-python could always use more documentation, whether as part of the official smsdrop-python docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/Tobi-De/smsdrop-python/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up smsdrop-python for local development. Fork the smsdrop-python repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:Tobi-De/smsdrop-python.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/Tobi-De/smsdrop-python/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"1 $ pytest tests.test_smsdrop_python To run a subset of tests.","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"history/","text":"History \u00b6 0.1.0 (2021-06-22) \u00b6 First release on PyPI.","title":"History"},{"location":"history/#history","text":"","title":"History"},{"location":"history/#010-2021-06-22","text":"First release on PyPI.","title":"0.1.0 (2021-06-22)"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install smsdrop-python, run this command in your terminal: 1 $ pip install smsdrop-python This is the preferred method to install smsdrop-python , as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for smsdrop-python can be downloaded from the Github repo . You can either clone the public repository: 1 $ git clone git://github.com/Tobi-De/smsdrop-python Or download the tarball : 1 $ curl -OJL https://github.com/Tobi-De/smsdrop-python/tarball/master Once you have a copy of the source, you can install it with: 1 $ pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install smsdrop-python, run this command in your terminal: 1 $ pip install smsdrop-python This is the preferred method to install smsdrop-python , as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for smsdrop-python can be downloaded from the Github repo . You can either clone the public repository: 1 $ git clone git://github.com/Tobi-De/smsdrop-python Or download the tarball : 1 $ curl -OJL https://github.com/Tobi-De/smsdrop-python/tarball/master Once you have a copy of the source, you can install it with: 1 $ pip install .","title":"From source"},{"location":"reference/","text":"smsdrop.smsdrop.Client dataclass \u00b6 Main module class that make the requests to the smsdrop api. Parameters: Name Type Description Default email str The email address of your smsdrop account, defaults to [None] required password str Your smsdrop account password required context Optional[str] Root url of the api required storage Optional[BaseStorage] A storage object that will be use to store the api token required logger Optioanl[logging.Logger] A logger instance with your own config required Exceptions: Type Description BadCredentialsError If the password or/and email your provided are incorrect launch_campaign ( self , campaign ) \u00b6 Send a request to the api to launch a new campaign from the smsdrop.CampaignIn instance provided Note that the campaign is always created even if an exception is raised, the instance your provide is updated with the response from the api. For example campaign.id will always be available even the campaign is not launched, it is always created except if there are some validation errors, you can use client.retry(campaign.id) to retry after you Parameters: Name Type Description Default campaign CampaignCreate An instance of the class smsdrop.CampaignIn required Exceptions: Type Description InsufficientSmsError If the number of sms available on your account is insufficient to launch the campaign ValidationError if the campaign data you provided is not valid ServerError If the server if failing for some obscure reasons read_campaign ( self , id ) \u00b6 Get a campaign data based on an id Parameters: Name Type Description Default id str The cmapign id required Returns: Type Description Optional[smsdrop.models.Campaign] An instance of smsdrop.CampaignIn read_campaigns ( self , skip = 0 , limit = 100 ) \u00b6 Get mutliple campaigns from the api Parameters: Name Type Description Default skip int starting index 0 limit int The maximum amount of element to get 100 Returns: Type Description List[smsdrop.models.Campaign] read_me ( self ) \u00b6 Get your profile informations Returns: Type Description User An instance of the smsdrop.User class Exceptions: Type Description ServerError If the server if failing for some obscure reasons read_subscription ( self ) \u00b6 Get your subsctiption informations Returns: Type Description Subscription An instance of the smsdrop.Subscription class Exceptions: Type Description ServerError If the server if failing for some obscure reasons retry_campaign ( self , id ) \u00b6 Retry a campaign if it was not launch due to insufficient sms on the user account Parameters: Name Type Description Default id str The id of your campaign required Exceptions: Type Description ServerError If the server if failing for some obscure reasons send_message ( self , message , sender , phone , dispatch_date = None ) \u00b6 Send a simple message to a single recipient. This is just a convenient helper to send sms to a unique recipient, internally it work exactly as a campaign and create a new campaign. Parameters: Name Type Description Default message str The content of your message required sender str The sender that will be displayed on the recipient phone required phone str The recipient's phone number, Ex: +229XXXXXXXX required dispatch_date Optional[datetime.datetime] The date you want the message to be sent None Returns: Type Description Campaign An instance of the class py:class:: smsdrop.Campaign Exceptions: Type Description ValidationError if some of the data you provided are not valid ServerError If the server if failing for some obscure reasons InsufficientSmsError If the number of sms available on your account is insufficient to send the message smsdrop.models.CampaignCreate dataclass \u00b6 Data class use to create a new campaign. Parameters: Name Type Description Default title str A title intended to help you identify this campaign, a random name will be generated if you do not provide one. required message str The content of your message required message_type MessageType The message type, the possible values are MessageType.PLAIN_TEXT , MessageType.UNICODE , MessageType.FLASH_MESSAGE required sender str The sender name that will be displayed on the recipient's phone. required defer_until Optional[datetime.datetime] The launch date of your campaign. It is recommended to specify your timezone infos in order to avoid surprises. required defer_by Optional[int] The number of seconds the launch will be postponed. required recipient_list List[str] The list of users the message will be sent to. Ex [\"phone1\", \"phone2\"]. The phone number format is '{code}{local_number}' , Ex: +22963588213, the \"+\" at the beginning is optional. required When you create an instance of this class, the only validation that is made is to check if you set both defer_by and defer_until which is not allowed. You campaign data is really only validate when the request is made to the check, so be sure to sanitize your data.","title":"Reference"},{"location":"reference/#smsdrop.smsdrop.Client","text":"Main module class that make the requests to the smsdrop api. Parameters: Name Type Description Default email str The email address of your smsdrop account, defaults to [None] required password str Your smsdrop account password required context Optional[str] Root url of the api required storage Optional[BaseStorage] A storage object that will be use to store the api token required logger Optioanl[logging.Logger] A logger instance with your own config required Exceptions: Type Description BadCredentialsError If the password or/and email your provided are incorrect","title":"Client"},{"location":"reference/#smsdrop.smsdrop.Client.launch_campaign","text":"Send a request to the api to launch a new campaign from the smsdrop.CampaignIn instance provided Note that the campaign is always created even if an exception is raised, the instance your provide is updated with the response from the api. For example campaign.id will always be available even the campaign is not launched, it is always created except if there are some validation errors, you can use client.retry(campaign.id) to retry after you Parameters: Name Type Description Default campaign CampaignCreate An instance of the class smsdrop.CampaignIn required Exceptions: Type Description InsufficientSmsError If the number of sms available on your account is insufficient to launch the campaign ValidationError if the campaign data you provided is not valid ServerError If the server if failing for some obscure reasons","title":"launch_campaign()"},{"location":"reference/#smsdrop.smsdrop.Client.read_campaign","text":"Get a campaign data based on an id Parameters: Name Type Description Default id str The cmapign id required Returns: Type Description Optional[smsdrop.models.Campaign] An instance of smsdrop.CampaignIn","title":"read_campaign()"},{"location":"reference/#smsdrop.smsdrop.Client.read_campaigns","text":"Get mutliple campaigns from the api Parameters: Name Type Description Default skip int starting index 0 limit int The maximum amount of element to get 100 Returns: Type Description List[smsdrop.models.Campaign]","title":"read_campaigns()"},{"location":"reference/#smsdrop.smsdrop.Client.read_me","text":"Get your profile informations Returns: Type Description User An instance of the smsdrop.User class Exceptions: Type Description ServerError If the server if failing for some obscure reasons","title":"read_me()"},{"location":"reference/#smsdrop.smsdrop.Client.read_subscription","text":"Get your subsctiption informations Returns: Type Description Subscription An instance of the smsdrop.Subscription class Exceptions: Type Description ServerError If the server if failing for some obscure reasons","title":"read_subscription()"},{"location":"reference/#smsdrop.smsdrop.Client.retry_campaign","text":"Retry a campaign if it was not launch due to insufficient sms on the user account Parameters: Name Type Description Default id str The id of your campaign required Exceptions: Type Description ServerError If the server if failing for some obscure reasons","title":"retry_campaign()"},{"location":"reference/#smsdrop.smsdrop.Client.send_message","text":"Send a simple message to a single recipient. This is just a convenient helper to send sms to a unique recipient, internally it work exactly as a campaign and create a new campaign. Parameters: Name Type Description Default message str The content of your message required sender str The sender that will be displayed on the recipient phone required phone str The recipient's phone number, Ex: +229XXXXXXXX required dispatch_date Optional[datetime.datetime] The date you want the message to be sent None Returns: Type Description Campaign An instance of the class py:class:: smsdrop.Campaign Exceptions: Type Description ValidationError if some of the data you provided are not valid ServerError If the server if failing for some obscure reasons InsufficientSmsError If the number of sms available on your account is insufficient to send the message","title":"send_message()"},{"location":"reference/#smsdrop.models.CampaignCreate","text":"Data class use to create a new campaign. Parameters: Name Type Description Default title str A title intended to help you identify this campaign, a random name will be generated if you do not provide one. required message str The content of your message required message_type MessageType The message type, the possible values are MessageType.PLAIN_TEXT , MessageType.UNICODE , MessageType.FLASH_MESSAGE required sender str The sender name that will be displayed on the recipient's phone. required defer_until Optional[datetime.datetime] The launch date of your campaign. It is recommended to specify your timezone infos in order to avoid surprises. required defer_by Optional[int] The number of seconds the launch will be postponed. required recipient_list List[str] The list of users the message will be sent to. Ex [\"phone1\", \"phone2\"]. The phone number format is '{code}{local_number}' , Ex: +22963588213, the \"+\" at the beginning is optional. required When you create an instance of this class, the only validation that is made is to check if you set both defer_by and defer_until which is not allowed. You campaign data is really only validate when the request is made to the check, so be sure to sanitize your data.","title":"CampaignCreate"},{"location":"usage/","text":"Usage \u00b6 To use smsdrop-python in a project 1 import smsdrop","title":"Usage"},{"location":"usage/#usage","text":"To use smsdrop-python in a project 1 import smsdrop","title":"Usage"}]}